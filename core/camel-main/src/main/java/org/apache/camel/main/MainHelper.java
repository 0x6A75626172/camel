/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.main;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;
import java.util.Set;
import java.util.function.Function;

import org.apache.camel.CamelContext;
import org.apache.camel.Component;
import org.apache.camel.ExtendedCamelContext;
import org.apache.camel.PropertyBindingException;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurer;
import org.apache.camel.support.PropertyBindingSupport;
import org.apache.camel.support.service.ServiceHelper;
import org.apache.camel.util.ObjectHelper;
import org.apache.camel.util.OrderedProperties;
import org.apache.camel.util.StringHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class MainHelper {
    private static final Logger LOG = LoggerFactory.getLogger(MainHelper.class);

    private static final Set<String> COMPONENT_ENV_NAMES = new HashSet<>(
            Arrays.asList(
                    // Generated by camel build tools - do NOT edit this list!
                    // COMPONENT-ENV-NAMES: START
                    "ACTIVEMQ",
                    "AHC",
                    "AHC_WS",
                    "AHC_WSS",
                    "AMQP",
                    "APNS",
                    "ARANGODB",
                    "AS2",
                    "ASTERISK",
                    "ATLASMAP",
                    "ATMOS",
                    "ATMOSPHERE_WEBSOCKET",
                    "ATOM",
                    "ATOMIX_MAP",
                    "ATOMIX_MESSAGING",
                    "ATOMIX_MULTIMAP",
                    "ATOMIX_QUEUE",
                    "ATOMIX_SET",
                    "ATOMIX_VALUE",
                    "AVRO",
                    "AWS2_ATHENA",
                    "AWS2_CW",
                    "AWS2_DDB",
                    "AWS2_DDBSTREAM",
                    "AWS2_EC2",
                    "AWS2_ECS",
                    "AWS2_EKS",
                    "AWS2_EVENTBRIDGE",
                    "AWS2_IAM",
                    "AWS2_KINESIS",
                    "AWS2_KINESIS_FIREHOSE",
                    "AWS2_KMS",
                    "AWS2_LAMBDA",
                    "AWS2_MQ",
                    "AWS2_MSK",
                    "AWS2_S3",
                    "AWS2_SES",
                    "AWS2_SNS",
                    "AWS2_SQS",
                    "AWS2_STS",
                    "AWS2_TRANSLATE",
                    "AWS_SECRETS_MANAGER",
                    "AZURE_EVENTHUBS",
                    "AZURE_STORAGE_BLOB",
                    "AZURE_STORAGE_DATALAKE",
                    "AZURE_STORAGE_QUEUE",
                    "BEAN",
                    "BEANSTALK",
                    "BEAN_VALIDATOR",
                    "BONITA",
                    "BOX",
                    "BRAINTREE",
                    "BROWSE",
                    "CAFFEINE_CACHE",
                    "CAFFEINE_LOADCACHE",
                    "CHATSCRIPT",
                    "CHUNK",
                    "CLASS",
                    "CMIS",
                    "CM_SMS",
                    "COAP",
                    "COAP+TCP",
                    "COAPS",
                    "COAPS+TCP",
                    "COMETD",
                    "COMETDS",
                    "CONSUL",
                    "CONTROLBUS",
                    "CORDA",
                    "COUCHBASE",
                    "COUCHDB",
                    "CQL",
                    "CRON",
                    "CRYPTO",
                    "CRYPTO_CMS",
                    "CXF",
                    "CXFRS",
                    "DATAFORMAT",
                    "DATASET",
                    "DATASET_TEST",
                    "DEBEZIUM_MONGODB",
                    "DEBEZIUM_MYSQL",
                    "DEBEZIUM_POSTGRES",
                    "DEBEZIUM_SQLSERVER",
                    "DIGITALOCEAN",
                    "DIRECT",
                    "DIRECT_VM",
                    "DISRUPTOR",
                    "DISRUPTOR_VM",
                    "DJL",
                    "DNS",
                    "DOCKER",
                    "DOZER",
                    "DRILL",
                    "DROPBOX",
                    "EHCACHE",
                    "ELASTICSEARCH_REST",
                    "ELSQL",
                    "ETCD_KEYS",
                    "ETCD_STATS",
                    "ETCD_WATCH",
                    "EXEC",
                    "FACEBOOK",
                    "FHIR",
                    "FILE",
                    "FILE_WATCH",
                    "FLATPACK",
                    "FLINK",
                    "FOP",
                    "FREEMARKER",
                    "FTP",
                    "FTPS",
                    "GANGLIA",
                    "GEOCODER",
                    "GIT",
                    "GITHUB",
                    "GOOGLE_BIGQUERY",
                    "GOOGLE_BIGQUERY_SQL",
                    "GOOGLE_CALENDAR",
                    "GOOGLE_CALENDAR_STREAM",
                    "GOOGLE_DRIVE",
                    "GOOGLE_MAIL",
                    "GOOGLE_MAIL_STREAM",
                    "GOOGLE_PUBSUB",
                    "GOOGLE_SHEETS",
                    "GOOGLE_SHEETS_STREAM",
                    "GOOGLE_STORAGE",
                    "GORA",
                    "GRAPE",
                    "GRAPHQL",
                    "GRPC",
                    "GUAVA_EVENTBUS",
                    "HAZELCAST_ATOMICVALUE",
                    "HAZELCAST_INSTANCE",
                    "HAZELCAST_LIST",
                    "HAZELCAST_MAP",
                    "HAZELCAST_MULTIMAP",
                    "HAZELCAST_QUEUE",
                    "HAZELCAST_REPLICATEDMAP",
                    "HAZELCAST_RINGBUFFER",
                    "HAZELCAST_SEDA",
                    "HAZELCAST_SET",
                    "HAZELCAST_TOPIC",
                    "HBASE",
                    "HDFS",
                    "HTTP",
                    "HTTPS",
                    "HWCLOUD_SMN",
                    "IEC60870_CLIENT",
                    "IEC60870_SERVER",
                    "IGNITE_CACHE",
                    "IGNITE_COMPUTE",
                    "IGNITE_EVENTS",
                    "IGNITE_IDGEN",
                    "IGNITE_MESSAGING",
                    "IGNITE_QUEUE",
                    "IGNITE_SET",
                    "IMAP",
                    "IMAPS",
                    "INFINISPAN",
                    "INFINISPAN_EMBEDDED",
                    "INFLUXDB",
                    "IOTA",
                    "IPFS",
                    "IRC",
                    "IRONMQ",
                    "JBPM",
                    "JCACHE",
                    "JCLOUDS",
                    "JCR",
                    "JDBC",
                    "JETTY",
                    "JGROUPS",
                    "JGROUPS_RAFT",
                    "JING",
                    "JIRA",
                    "JMS",
                    "JMX",
                    "JOLT",
                    "JOOQ",
                    "JPA",
                    "JSLT",
                    "JSONATA",
                    "JSON_VALIDATOR",
                    "JT400",
                    "KAFKA",
                    "KAMELET",
                    "KUBERNETES_CONFIG_MAPS",
                    "KUBERNETES_CUSTOM_RESOURCES",
                    "KUBERNETES_DEPLOYMENTS",
                    "KUBERNETES_HPA",
                    "KUBERNETES_JOB",
                    "KUBERNETES_NAMESPACES",
                    "KUBERNETES_NODES",
                    "KUBERNETES_PERSISTENT_VOLUMES",
                    "KUBERNETES_PERSISTENT_VOLUMES_CLAIMS",
                    "KUBERNETES_PODS",
                    "KUBERNETES_REPLICATION_CONTROLLERS",
                    "KUBERNETES_RESOURCES_QUOTA",
                    "KUBERNETES_SECRETS",
                    "KUBERNETES_SERVICES",
                    "KUBERNETES_SERVICE_ACCOUNTS",
                    "KUDU",
                    "LANGUAGE",
                    "LDAP",
                    "LDIF",
                    "LOG",
                    "LPR",
                    "LUCENE",
                    "LUMBERJACK",
                    "MASTER",
                    "METRICS",
                    "MICROMETER",
                    "MICROPROFILE_METRICS",
                    "MILO_CLIENT",
                    "MILO_SERVER",
                    "MINA",
                    "MINIO",
                    "MLLP",
                    "MOCK",
                    "MONGODB",
                    "MONGODB_GRIDFS",
                    "MSV",
                    "MUSTACHE",
                    "MVEL",
                    "MYBATIS",
                    "MYBATIS_BEAN",
                    "NAGIOS",
                    "NATS",
                    "NETTY",
                    "NETTY_HTTP",
                    "NITRITE",
                    "NSQ",
                    "OAIPMH",
                    "OLINGO2",
                    "OLINGO4",
                    "OPENSHIFT_BUILDS",
                    "OPENSHIFT_BUILD_CONFIGS",
                    "OPENSTACK_CINDER",
                    "OPENSTACK_GLANCE",
                    "OPENSTACK_KEYSTONE",
                    "OPENSTACK_NEUTRON",
                    "OPENSTACK_NOVA",
                    "OPENSTACK_SWIFT",
                    "OPTAPLANNER",
                    "PAHO",
                    "PAHO_MQTT5",
                    "PDF",
                    "PGEVENT",
                    "PG_REPLICATION_SLOT",
                    "PLATFORM_HTTP",
                    "POP3",
                    "POP3S",
                    "PUBNUB",
                    "PULSAR",
                    "QUARTZ",
                    "QUICKFIX",
                    "RABBITMQ",
                    "REACTIVE_STREAMS",
                    "REF",
                    "REST",
                    "RESTEASY",
                    "REST_API",
                    "REST_OPENAPI",
                    "REST_SWAGGER",
                    "ROBOTFRAMEWORK",
                    "RSS",
                    "SAGA",
                    "SALESFORCE",
                    "SAP_NETWEAVER",
                    "SCHEDULER",
                    "SCHEMATRON",
                    "SCP",
                    "SEDA",
                    "SERVICE",
                    "SERVICENOW",
                    "SERVLET",
                    "SFTP",
                    "SIP",
                    "SIPS",
                    "SJMS",
                    "SJMS2",
                    "SLACK",
                    "SMPP",
                    "SMPPS",
                    "SMTP",
                    "SMTPS",
                    "SNMP",
                    "SOLR",
                    "SOLRCLOUD",
                    "SOLRS",
                    "SOROUSH",
                    "SPARK",
                    "SPLUNK",
                    "SPLUNK_HEC",
                    "SPRING_BATCH",
                    "SPRING_EVENT",
                    "SPRING_INTEGRATION",
                    "SPRING_LDAP",
                    "SPRING_RABBITMQ",
                    "SPRING_REDIS",
                    "SPRING_WS",
                    "SQL",
                    "SQL_STORED",
                    "SSH",
                    "STAX",
                    "STITCH",
                    "STOMP",
                    "STREAM",
                    "STRING_TEMPLATE",
                    "STUB",
                    "TELEGRAM",
                    "THRIFT",
                    "TIKA",
                    "TIMER",
                    "TWILIO",
                    "TWITTER_DIRECTMESSAGE",
                    "TWITTER_SEARCH",
                    "TWITTER_TIMELINE",
                    "UNDERTOW",
                    "VALIDATOR",
                    "VELOCITY",
                    "VERTX",
                    "VERTX_HTTP",
                    "VERTX_KAFKA",
                    "VERTX_WEBSOCKET",
                    "VM",
                    "WEATHER",
                    "WEB3J",
                    "WEBHOOK",
                    "WEBSOCKET",
                    "WEBSOCKET_JSR356",
                    "WEKA",
                    "WORDPRESS",
                    "WORKDAY",
                    "XCHANGE",
                    "XJ",
                    "XMLSECURITY_SIGN",
                    "XMLSECURITY_VERIFY",
                    "XMPP",
                    "XQUERY",
                    "XSLT",
                    "XSLT_SAXON",
                    "YAMMER",
                    "ZENDESK",
                    "ZOOKEEPER",
                    "ZOOKEEPER_MASTER"
            // COMPONENT-ENV-NAMES: END
            ));

    private static final Set<String> DATAFORMAT_ENV_NAMES = new HashSet<>(
            Arrays.asList(
                    // Generated by camel build tools - do NOT edit this list!
                    // DATAFORMAT-ENV-NAMES: START
                    "ANY23",
                    "ASN1",
                    "AVRO",
                    "BARCODE",
                    "BASE64",
                    "BEANIO",
                    "BINDY_CSV",
                    "BINDY_FIXED",
                    "BINDY_KVP",
                    "CBOR",
                    "CRYPTO",
                    "CSV",
                    "FHIRJSON",
                    "FHIRXML",
                    "FLATPACK",
                    "GROK",
                    "GZIPDEFLATER",
                    "HL7",
                    "ICAL",
                    "JACKSONXML",
                    "JAXB",
                    "JSONAPI",
                    "JSON_FASTJSON",
                    "JSON_GSON",
                    "JSON_JACKSON",
                    "JSON_JOHNZON",
                    "JSON_JSONB",
                    "JSON_XSTREAM",
                    "LZF",
                    "MIME_MULTIPART",
                    "PGP",
                    "PROTOBUF",
                    "RSS",
                    "SECUREXML",
                    "SOAPJAXB",
                    "SYSLOG",
                    "TARFILE",
                    "THRIFT",
                    "TIDYMARKUP",
                    "UNIVOCITY_CSV",
                    "UNIVOCITY_FIXED",
                    "UNIVOCITY_TSV",
                    "XSTREAM",
                    "YAML_SNAKEYAML",
                    "ZIPDEFLATER",
                    "ZIPFILE"
            // DATAFORMAT-ENV-NAMES: END
            ));

    private static final Set<String> LANGUAGE_ENV_NAMES = new HashSet<>(
            Arrays.asList(
                    // Generated by camel build tools - do NOT edit this list!
                    // LANGUAGE-ENV-NAMES: START
                    "BEAN",
                    "CONSTANT",
                    "CSIMPLE",
                    "DATASONNET",
                    "EXCHANGEPROPERTY",
                    "FILE",
                    "GROOVY",
                    "HEADER",
                    "HL7TERSER",
                    "JOOR",
                    "JSONPATH",
                    "MVEL",
                    "OGNL",
                    "REF",
                    "SIMPLE",
                    "SPEL",
                    "TOKENIZE",
                    "XPATH",
                    "XQUERY",
                    "XTOKENIZE"
            // LANGUAGE-ENV-NAMES: END
            ));

    private MainHelper() {
    }

    public static void bootstrapDone() {
        // after bootstrap then these maps are no longer needed
        COMPONENT_ENV_NAMES.clear();
        DATAFORMAT_ENV_NAMES.clear();
        LANGUAGE_ENV_NAMES.clear();
    }

    public static String toEnvVar(String name) {
        return name.toUpperCase(Locale.US).replaceAll("[^\\w]", "-").replace('-', '_');
    }

    public static Optional<String> lookupPropertyFromSysOrEnv(String name) {
        String answer = System.getProperty(name);
        if (answer == null) {
            answer = System.getenv(toEnvVar(name));
        }

        return Optional.ofNullable(answer);
    }

    public static Properties loadEnvironmentVariablesAsProperties(String[] prefixes) {
        Properties answer = new OrderedProperties();
        if (prefixes == null || prefixes.length == 0) {
            return answer;
        }

        for (String prefix : prefixes) {
            final String pk = prefix.toUpperCase(Locale.US).replaceAll("[^\\w]", "-");
            final String pk2 = pk.replace('-', '_');
            System.getenv().forEach((k, v) -> {
                k = k.toUpperCase(Locale.US);
                if (k.startsWith(pk) || k.startsWith(pk2)) {
                    String key = k.toLowerCase(Locale.US).replace('_', '.');
                    answer.put(key, v);
                }
            });
        }

        return answer;
    }

    public static Map<String, String> filterEnvVariables(String[] prefixes) {
        Map<String, String> answer = new HashMap<>();
        System.getenv().forEach((k, v) -> {
            final String uk = k.toUpperCase(Locale.US);
            for (String prefix : prefixes) {
                if (uk.startsWith(prefix)) {
                    answer.put(uk, v);
                }
            }
        });
        return answer;
    }

    public static void addComponentEnvVariables(Map<String, String> env, Properties properties, boolean custom) {
        Set<String> toRemove = new HashSet<>();
        env.forEach((k, v) -> {
            if (custom) {
                toRemove.add(k);
                String ck = "camel.component." + k.substring(16).toLowerCase(Locale.US).replace('_', '-');
                ck = ck.replaceFirst("-", ".");
                properties.put(ck, v);
            } else {
                Optional<String> e
                        = COMPONENT_ENV_NAMES.stream().map(s -> "CAMEL_COMPONENT_" + s).filter(k::startsWith).findFirst();
                if (e.isPresent()) {
                    toRemove.add(k);
                    String cname = "camel.component." + e.get().substring(16).toLowerCase(Locale.US).replace('_', '-');
                    String option = k.substring(cname.length() + 1).toLowerCase(Locale.US).replace('_', '-');
                    properties.put(cname + "." + option, v);
                }
            }
        });
        toRemove.forEach(env::remove);
    }

    public static void addDataFormatEnvVariables(Map<String, String> env, Properties properties, boolean custom) {
        Set<String> toRemove = new HashSet<>();
        env.forEach((k, v) -> {
            if (custom) {
                toRemove.add(k);
                String ck = "camel.dataformat." + k.substring(17).toLowerCase(Locale.US).replace('_', '-');
                ck = ck.replaceFirst("-", ".");
                properties.put(ck, v);
            } else {
                Optional<String> e
                        = DATAFORMAT_ENV_NAMES.stream().map(s -> "CAMEL_DATAFORMAT_" + s).filter(k::startsWith).findFirst();
                if (e.isPresent()) {
                    toRemove.add(k);
                    String cname = "camel.dataformat." + e.get().substring(17).toLowerCase(Locale.US).replace('_', '-');
                    String option = k.substring(cname.length() + 1).toLowerCase(Locale.US).replace('_', '-');
                    properties.put(cname + "." + option, v);
                }
            }
        });
        toRemove.forEach(env::remove);
    }

    public static void addLanguageEnvVariables(Map<String, String> env, Properties properties, boolean custom) {
        Set<String> toRemove = new HashSet<>();
        env.forEach((k, v) -> {
            if (custom) {
                toRemove.add(k);
                String ck = "camel.language." + k.substring(15).toLowerCase(Locale.US).replace('_', '-');
                ck = ck.replaceFirst("-", ".");
                properties.put(ck, v);
            } else {
                Optional<String> e
                        = LANGUAGE_ENV_NAMES.stream().map(s -> "CAMEL_LANGUAGE_" + s).filter(k::startsWith).findFirst();
                if (e.isPresent()) {
                    toRemove.add(k);
                    String cname = "camel.language." + e.get().substring(15).toLowerCase(Locale.US).replace('_', '-');
                    String option = k.substring(cname.length() + 1).toLowerCase(Locale.US).replace('_', '-');
                    properties.put(cname + "." + option, v);
                }
            }
        });
        toRemove.forEach(env::remove);
    }

    private static String asEnvName(String name) {
        return name.toUpperCase(Locale.US).replace('-', '_');
    }

    public static Properties loadJvmSystemPropertiesAsProperties(String[] prefixes) {
        Properties answer = new OrderedProperties();
        if (prefixes == null || prefixes.length == 0) {
            return answer;
        }

        for (String prefix : prefixes) {
            final String pk = prefix.toUpperCase(Locale.US).replaceAll("[^\\w]", "-");
            final String pk2 = pk.replace('-', '.');
            System.getProperties().forEach((k, v) -> {
                String key = k.toString().toUpperCase(Locale.US);
                if (key.startsWith(pk) || key.startsWith(pk2)) {
                    answer.put(k.toString(), v);
                }
            });
        }

        return answer;
    }

    public static String optionKey(String key) {
        // as we ignore case for property names we should use keys in same case and without dashes
        key = StringHelper.dashToCamelCase(key);
        return key;
    }

    public static boolean setPropertiesOnTarget(CamelContext context, Object target, Object source) throws Exception {
        ObjectHelper.notNull(context, "context");
        ObjectHelper.notNull(target, "target");

        boolean rc = false;

        PropertyConfigurer targetConfigurer = null;
        if (target instanceof Component) {
            // the component needs to be initialized to have the configurer ready
            ServiceHelper.initService(target);
            targetConfigurer = ((Component) target).getComponentPropertyConfigurer();
        }
        if (targetConfigurer == null) {
            String name = target.getClass().getName();
            // see if there is a configurer for it
            targetConfigurer = context.adapt(ExtendedCamelContext.class)
                    .getConfigurerResolver().resolvePropertyConfigurer(name, context);
        }

        PropertyConfigurer sourceConfigurer = null;
        if (source instanceof Component) {
            // the component needs to be initialized to have the configurer ready
            ServiceHelper.initService(source);
            sourceConfigurer = ((Component) source).getComponentPropertyConfigurer();
        }
        if (sourceConfigurer == null) {
            String name = source.getClass().getName();
            // see if there is a configurer for it
            sourceConfigurer = context.adapt(ExtendedCamelContext.class)
                    .getConfigurerResolver().resolvePropertyConfigurer(name, context);
        }

        if (targetConfigurer != null && sourceConfigurer instanceof ExtendedPropertyConfigurerGetter) {
            ExtendedPropertyConfigurerGetter getter = (ExtendedPropertyConfigurerGetter) sourceConfigurer;
            for (String key : getter.getAllOptions(source).keySet()) {
                Object value = getter.getOptionValue(source, key, true);
                if (value != null) {
                    rc |= targetConfigurer.configure(context, target, key, value, true);
                }
            }
        }
        return rc;
    }

    public static boolean setPropertiesOnTarget(
            CamelContext context, Object target, Map<String, Object> properties,
            String optionPrefix, boolean failIfNotSet, boolean ignoreCase,
            Map<String, String> autoConfiguredProperties) {

        ObjectHelper.notNull(context, "context");
        ObjectHelper.notNull(target, "target");
        ObjectHelper.notNull(properties, "properties");

        boolean rc = false;
        PropertyConfigurer configurer = null;
        if (target instanceof Component) {
            // the component needs to be initialized to have the configurer ready
            ServiceHelper.initService(target);
            configurer = ((Component) target).getComponentPropertyConfigurer();
        }

        if (configurer == null) {
            String name = target.getClass().getName();
            // see if there is a configurer for it (use bootstrap)
            configurer = context.adapt(ExtendedCamelContext.class)
                    .getBootstrapConfigurerResolver().resolvePropertyConfigurer(name, context);
        }

        try {
            // keep a reference of the original keys
            Map<String, Object> backup = new LinkedHashMap<>(properties);

            rc = PropertyBindingSupport.build()
                    .withMandatory(failIfNotSet)
                    .withRemoveParameters(true)
                    .withConfigurer(configurer)
                    .withIgnoreCase(ignoreCase)
                    .bind(context, target, properties);

            for (Map.Entry<String, Object> entry : backup.entrySet()) {
                if (entry.getValue() != null && !properties.containsKey(entry.getKey())) {
                    String prefix = optionPrefix;
                    if (prefix != null && !prefix.endsWith(".")) {
                        prefix = "." + prefix;
                    }

                    LOG.debug("Configured property: {}{}={} on bean: {}", prefix, entry.getKey(), entry.getValue(), target);
                    autoConfiguredProperties.put(prefix + entry.getKey(), entry.getValue().toString());
                }
            }
        } catch (PropertyBindingException e) {
            String key = e.getOptionKey();
            if (key == null) {
                String prefix = e.getOptionPrefix();
                if (prefix != null && !prefix.endsWith(".")) {
                    prefix = "." + prefix;
                }

                key = prefix != null
                        ? prefix + "." + e.getPropertyName()
                        : e.getPropertyName();
            }

            if (failIfNotSet) {
                // enrich the error with more precise details with option prefix and key
                throw new PropertyBindingException(
                        e.getTarget(), e.getPropertyName(), e.getValue(), optionPrefix, key, e.getCause());
            } else {
                LOG.debug("Error configuring property (" + key + ") with name: " + e.getPropertyName() + ") on bean: " + target
                          + " with value: " + e.getValue() + ". This exception is ignored as failIfNotSet=false.",
                        e);
            }
        }

        return rc;
    }

    public static void computeProperties(
            String keyPrefix, String key, Properties prop, Map<PropertyOptionKey, Map<String, Object>> properties,
            Function<String, Iterable<Object>> supplier) {
        if (key.startsWith(keyPrefix)) {
            // grab name
            final int dot = key.indexOf('.', keyPrefix.length());
            final String name = dot == -1 ? key.substring(keyPrefix.length()) : key.substring(keyPrefix.length(), dot);

            // enabled is a virtual property
            if ("enabled".equals(name)) {
                return;
            }
            // skip properties as its already keyPrefix earlier
            if ("properties".equals(name)) {
                return;
            }

            // determine if the service is enabled or not by taking into account two options:
            //
            //   1. ${keyPrefix}.enabled = true|false
            //   2. ${keyPrefix}.${name}.enabled = true|false
            //
            // The option [2] has the higher priority so as example:
            //
            //   camel.component.enabled = false
            //   camel.component.seda.enabled = true
            //
            // enables auto configuration of the seda component only
            if (!isServiceEnabled(keyPrefix, name, prop)) {
                return;
            }

            String prefix = dot == -1 ? "" : key.substring(0, dot + 1);
            String option = dot == -1 ? "" : key.substring(dot + 1);
            String value = prop.getProperty(key, "");

            // enabled is a virtual property
            if ("enabled".equalsIgnoreCase(option)) {
                return;
            }

            validateOptionAndValue(key, option, value);

            Iterable<Object> targets = supplier.apply(name);
            for (Object target : targets) {
                PropertyOptionKey pok = new PropertyOptionKey(target, prefix);
                Map<String, Object> values = properties.computeIfAbsent(pok, k -> new LinkedHashMap<>());

                // we ignore case for property keys (so we should store them in canonical style
                values.put(optionKey(option), value);
            }
        }
    }

    public static boolean isServiceEnabled(String prefix, String name, Properties properties) {
        ObjectHelper.notNull(prefix, "prefix");
        ObjectHelper.notNull(name, "name");
        ObjectHelper.notNull(properties, "properties");

        if (!prefix.endsWith(".")) {
            prefix = prefix + ".";
        }

        final String group = properties.getProperty(prefix + "enabled", "true");
        final String item = properties.getProperty(prefix + name + ".enabled", group);

        return Boolean.parseBoolean(item);
    }

    public static void validateOptionAndValue(String key, String option, String value) {
        if (ObjectHelper.isEmpty(option)) {
            throw new IllegalArgumentException("Error configuring property: " + key + " because option is empty");
        }
        if (ObjectHelper.isEmpty(value)) {
            throw new IllegalArgumentException("Error configuring property: " + key + " because value is empty");
        }
    }

}
